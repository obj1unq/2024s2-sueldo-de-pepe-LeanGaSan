import clases.clase3.ElSuedoDePepe.*


describe "Batería de test" {

    test "Pepe como cadete, con bono resultado de monto fijo, y bono presentismo normal." {
        /* Hacer un test con pepe como cadete, con bono resultado de monto fijo, y bono presentismo normal. 
	Simular que faltó 3 días. Debería tener $20800 de sueldo.
        */
        pepe.categoria(cadete)
        pepe.bonoResultado(montoFijo)
        pepe.bonoPresentismo(normal)
        pepe.faltas(3)

        assert.equals(20800, pepe.sueldo())

    }

    test "neto" {
		pepe.categoria(cadete)
		assert.equals(20000, pepe.neto())
		pepe.categoria(gerente)
		assert.equals(15000, pepe.neto())
	}

	test "bonos resultdos" {
		pepe.categoria(gerente)

		pepe.bonoResultado(montoFijo)
		assert.equals(800, pepe.bonoResultado())

		pepe.bonoResultado(nulo)
		assert.equals(0, pepe.bonoResultado())

		pepe.bonoResultado(porcentaje)
		assert.equals(1500, pepe.bonoResultado())

		pepe.categoria(cadete)
		assert.equals(2000, pepe.bonoResultado())
	}

	test "bonos presentismo Nulo" {
		
		pepe.bonoPresentismo(nulo)
		assert.equals(0, pepe.bonoPresentismo())
	}

	test "bono presentismo normal" {
		
		pepe.bonoPresentismo(normal)
		pepe.faltas(0)
		assert.equals(2000, pepe.bonoPresentismo())

		pepe.faltas(1)
		assert.equals(1000, pepe.bonoPresentismo())

		pepe.faltas(2)
		assert.equals(0, pepe.bonoPresentismo())
	}

	test "bono presentismo ajuste"{
		pepe.bonoPresentismo(ajuste)
		pepe.faltas(0)
		assert.equals(100, pepe.bonoPresentismo())
		pepe.faltas(1) 
		assert.equals(0, pepe.bonoPresentismo())
	}

	test "bono presentismo demagogico" {
		pepe.bonoPresentismo(demagogico)
		pepe.categoria(gerente)
		assert.equals(500, pepe.bonoPresentismo())

		pepe.categoria(cadete)
		assert.equals(300, pepe.bonoPresentismo())

	}

	test "bono prsentismo demagogico" {
		pepe.bonoPresentismo(demagogico)
		pepe.categoria(gerente)
		assert.equals(500, pepe.bonoPresentismo())

		pepe.categoria(cadete)
		assert.equals(300, pepe.bonoPresentismo())

	}

    test "Pepe como gerente, con el bono resultado por porcentaje, y bono de presentismo nulo." {
        /* Hacer un test con pepe como gerente, con el bono resultado por porcentaje, y bono de presentismo nulo. 
	El sueldo debe dar $16500.
        */
        pepe.categoria(gerente)
        pepe.bonoResultado(porcentaje)
        pepe.bonoPresentismo(nulo)
            
        assert.equals(16500, pepe.sueldo())

    }

    test "Pepe cadete con bono de resultados por porcentaje, bono por presentismo normal, nunca faltó." {
        /* Realizar un test con pepe cadete con bono de resultados por porcentaje, bono por presentismo normal, nunca faltó. 
	Debería tener $24000 de sueldo.
        */
        pepe.categoria(cadete)
        pepe.bonoResultado(porcentaje)
        pepe.bonoPresentismo(normal)
        pepe.faltas(3)

        assert.equals(24000, pepe.sueldo())

    }

    test "Pepe cadete con bono de resultados por porcentaje, bono por presentismo normal, falto 1 día." {
        /* Realizar un test con pepe cadete con bono de resultados por porcentaje, bono por presentismo normal, falto 1 día. 
	Debería tener $23000 de sueldo.
        */
        pepe.categoria(cadete)
        pepe.bonoResultado(porcentaje)
        pepe.bonoPresentismo(normal)
        pepe.faltas(3)

        assert.equals(23000, pepe.sueldo())

    }

}

//BONUS 
describe "Bonus" {
    test "1. La categoria base de medio tiempo es cadete" {

        medioTiempo.categoriaBase(cadete)
        assert.equals(10000, medioTiempo.gananciaNeto())
    
    }

    test "2. Pepe tiene categoría medio tiempo, bono resultado por porcentaje, bono presentismo demagógico, faltó 1 día" {
    
        pepe.categoria(medioTiempo)
        pepe.bonoResultado(porcentaje)
        pepe.bonoPresentismo(demagogico)
        pepe.faltas(1)
    
        assert.equals(11500, pepe.sueldo())
    }

    test "3. Roque tiene bono por resultados monto fijo" {
        roque.bonoResultado(montoFijo)

        assert.equals(800, roque.bonoResultado())
    }

    test "4. Ernesto tiene como compañero a Pepe, y bono por porcentaje de ajuste" {
        ernesto.companiero(pepe)
        ernesto.bonoPresentismo(ajuste)

        assert.equals(20100, ernesto.sueldo())
        
    }
}
